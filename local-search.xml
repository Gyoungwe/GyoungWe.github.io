<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>How to find the longest CDS with genome fasta file and genome annotation file-gff</title>
    <link href="/2024/05/08/How-to-find-the-longest-CDS-with-genome-fasta-file-and-genome-annotation-file-gff/"/>
    <url>/2024/05/08/How-to-find-the-longest-CDS-with-genome-fasta-file-and-genome-annotation-file-gff/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-keyword">from</span> Bio <span class="hljs-keyword">import</span> SeqIO<br><span class="hljs-keyword">from</span> Bio.SeqRecord <span class="hljs-keyword">import</span> SeqRecord<br><span class="hljs-keyword">from</span> Bio.Seq <span class="hljs-keyword">import</span> Seq<br><br><span class="hljs-comment"># 检查命令行参数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python script.py yourfile.gff yourgenome.fasta outputfile.fasta&quot;</span>)<br>    sys.exit(<span class="hljs-number">1</span>)<br><br>gff_filename = sys.argv[<span class="hljs-number">1</span>]<br>fasta_filename = sys.argv[<span class="hljs-number">2</span>]<br>output_filename = sys.argv[<span class="hljs-number">3</span>]<br><br><span class="hljs-comment"># 用于记录每个mRNA的所有CDS信息</span><br>mrna_cds_details = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 存储基因对应的所有mRNA</span><br>gene_to_mrnas = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 存储每个mRNA所有CDS的总长度</span><br>mrna_total_cds_length = defaultdict(<span class="hljs-built_in">int</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_attributes</span>(<span class="hljs-params">attribute_string</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Parse the GFF3 attribute column and return a dict of all attributes.&quot;&quot;&quot;</span><br>    attributes = &#123;&#125;<br>    <span class="hljs-keyword">for</span> attribute <span class="hljs-keyword">in</span> attribute_string.split(<span class="hljs-string">&#x27;;&#x27;</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;=&quot;</span> <span class="hljs-keyword">in</span> attribute:<br>            key, value = attribute.split(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 分割出键和值</span><br>            attributes[key] = value<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果没有等号，则整个字符串视为键，值设为空字符串</span><br>            attributes[attribute] = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> attributes<br><br><br><br><span class="hljs-comment"># 解析GFF文件提取信息</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(gff_filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> gff_file:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> gff_file:<br>        <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;#&quot;</span>):<br>            <span class="hljs-keyword">continue</span><br><br>        parts = line.strip().split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts) &lt; <span class="hljs-number">9</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid line:&quot;</span>, line)<br>            <span class="hljs-keyword">continue</span><br><br>        chromosome, feature_type, start, end, strand, attributes = parts[<span class="hljs-number">0</span>], parts[<span class="hljs-number">2</span>], <span class="hljs-built_in">int</span>(parts[<span class="hljs-number">3</span>]), <span class="hljs-built_in">int</span>(parts[<span class="hljs-number">4</span>]), parts[<span class="hljs-number">6</span>], parts[<span class="hljs-number">8</span>] <span class="hljs-comment">#print(attributes)</span><br><br>        attr_dict = parse_attributes(attributes)<br><br>        <span class="hljs-keyword">if</span> feature_type <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;mRNA&quot;</span>, <span class="hljs-string">&quot;transcript&quot;</span>]:<br>            mrna_id = attr_dict.get(<span class="hljs-string">&#x27;ID&#x27;</span>)<br>            parent_gene = attr_dict.get(<span class="hljs-string">&#x27;Parent&#x27;</span>)<br>            gene_to_mrnas[parent_gene].append((mrna_id, strand))<br>        <span class="hljs-keyword">elif</span> feature_type == <span class="hljs-string">&#x27;CDS&#x27;</span>:<br>            cds_id = attr_dict.get(<span class="hljs-string">&#x27;ID&#x27;</span>)<br>            parent_mrna = attr_dict.get(<span class="hljs-string">&#x27;Parent&#x27;</span>)<br>            cds_length = end - start + <span class="hljs-number">1</span><br>            mrna_cds_details[parent_mrna].append((cds_id, cds_length, chromosome, start, end, strand))<br>            mrna_total_cds_length[parent_mrna] += cds_length<br><br><span class="hljs-comment"># 读取fasta文件并存储序列</span><br>sequences = SeqIO.to_dict(SeqIO.parse(fasta_filename, <span class="hljs-string">&quot;fasta&quot;</span>))<br><br>longest_cds = &#123;&#125;<br>longest_cds_records = []<br><span class="hljs-comment"># 写入信息到文件并提取最长CDS序列</span><br><br>output_info = output_filename.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;_info.txt&quot;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_info, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> out_file:<br>    <span class="hljs-keyword">for</span> gene_id, mrnas <span class="hljs-keyword">in</span> gene_to_mrnas.items():<br>        out_file.write(<span class="hljs-string">f&quot;Gene: <span class="hljs-subst">&#123;gene_id&#125;</span>\n&quot;</span>)<br>        longest_mrna, strand = <span class="hljs-built_in">max</span>(mrnas, key=<span class="hljs-keyword">lambda</span> x: mrna_total_cds_length[x[<span class="hljs-number">0</span>]])<br>        out_file.write(<span class="hljs-string">f&quot;  mRNA with longest CDS: <span class="hljs-subst">&#123;longest_mrna&#125;</span> (strand: <span class="hljs-subst">&#123;strand&#125;</span>)\n&quot;</span>)<br>        cds_details = mrna_cds_details[longest_mrna]<br>        <span class="hljs-comment"># 如果是负链，则需要反转CDS的顺序</span><br>        <span class="hljs-keyword">if</span> strand == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            cds_details = <span class="hljs-built_in">sorted</span>(cds_details, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">3</span>], reverse=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">else</span>:<br>            cds_details = <span class="hljs-built_in">sorted</span>(cds_details, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">3</span>])<br>        longest_cds_sequence = Seq(<span class="hljs-string">&#x27;&#x27;</span>)<br>        cds_locations = []<br>        <span class="hljs-keyword">for</span> cds_detail <span class="hljs-keyword">in</span> cds_details:<br>            cds_id, cds_length, chromosome, start, end, _strand = cds_detail<br>            out_file.write(<br>                <span class="hljs-string">f&quot;    CDS: <span class="hljs-subst">&#123;cds_id&#125;</span>, Length: <span class="hljs-subst">&#123;cds_length&#125;</span>, Chromosome: <span class="hljs-subst">&#123;chromosome&#125;</span>, Start: <span class="hljs-subst">&#123;start&#125;</span>, End: <span class="hljs-subst">&#123;end&#125;</span>\n&quot;</span>)<br>            extracted_seq = sequences[chromosome].seq[start - <span class="hljs-number">1</span>:end]<br>            <span class="hljs-keyword">if</span> _strand == <span class="hljs-string">&#x27;-&#x27;</span>:  <span class="hljs-comment"># 如果位于反向链，反向互补序列</span><br>                extracted_seq = extracted_seq.reverse_complement()<br>            longest_cds_sequence += extracted_seq<br>            <span class="hljs-comment"># 记录CDS的位置信息，考虑到方向性</span><br>            location = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;start&#125;</span>..<span class="hljs-subst">&#123;end&#125;</span>&quot;</span> <span class="hljs-keyword">if</span> _strand == <span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">f&quot;complement(<span class="hljs-subst">&#123;end&#125;</span>..<span class="hljs-subst">&#123;start&#125;</span>)&quot;</span><br>            cds_locations.append(location)<br>        location_string = <span class="hljs-string">&quot;join(&quot;</span> + <span class="hljs-string">&quot;,&quot;</span>.join(cds_locations) + <span class="hljs-string">&quot;)&quot;</span><br>        longest_cds[gene_id] = (longest_cds_sequence, location_string)<br><br><span class="hljs-keyword">for</span> gene_id, (longest_cds_sequence, location_string) <span class="hljs-keyword">in</span> longest_cds.items():<br>    <span class="hljs-comment"># 创建一个SeqRecord对象，并使用gene_id和位置信息作为描述</span><br>    description = <span class="hljs-string">f&quot;gene_id=<span class="hljs-subst">&#123;gene_id&#125;</span> location=<span class="hljs-subst">&#123;location_string&#125;</span>&quot;</span><br>    record = SeqRecord(longest_cds_sequence, <span class="hljs-built_in">id</span>=gene_id, description=description)<br>    longest_cds_records.append(record)<br><br><br><br><span class="hljs-comment"># 将所有的SeqRecord对象写入到同一个FASTA文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_filename, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> out_file:<br>    SeqIO.write(longest_cds_records, out_file, <span class="hljs-string">&quot;fasta&quot;</span>)<br></code></pre></td></tr></table></figure></div>]]></content>
    
    
    <categories>
      
      <category>生物信息学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>序列处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
